version: 2.1

jobs:
  test_backend:
    working_directory: ~/basset/express
    docker:
      - image: circleci/node:10.14.1
        environment:
          DB_HOST: localhost
          DB_NAME: bassettest
          DB_USERNAME: basset
          NODE_ENV: test
          BASSET_URL: http://localhost:3000
          BASSET_PRIVATE: 0
      - image: circleci/postgres:10
        environment:
          POSTGRES_USER: basset
          POSTGRES_DB: bassettest
    environment:
      JEST_JUNIT_OUTPUT_DIR: /tmp/test-results/
    steps:
      - checkout:
          path: ~/basset
      - run: mkdir -p /tmp/test-results/
      - run:
          name: update-npm
          command: 'sudo npm install -g npm@latest'
      - restore_cache:
          key: basset-be-cache-{{ checksum "package.json" }}
      - run:
          name: install-npm
          command: npm install
      - save_cache:
          key: basset-be-cache-{{ checksum "package.json" }}
          paths:
            - ./node_modules
      - run:
          name: Unit test backend
          command: npm run test:unit -- -i --reporters=default --reporters=jest-junit
      - store_test_results:
          path: /tmp/test-results/
      - store_artifacts:
          path: /tmp/test-results/

  test_frontend:
    working_directory: ~/basset/react
    docker:
      - image: circleci/node:10.14.1
    environment:
      JEST_JUNIT_OUTPUT_DIR: /tmp/test-results/
    steps:
      - checkout:
          path: ~/basset
      - run: mkdir -p /tmp/test-reports
      - run:
          name: update-npm
          command: 'sudo npm install -g npm@latest'
      - restore_cache:
          key: basset-fe-cache-{{ checksum "package.json" }}
      - run:
          name: install-npm
          command: npm install
      - save_cache:
          key: basset-fe-cache-{{ checksum "package.json" }}
          paths:
            - ./node_modules
      - run: npm run test -- -i --reporters=default --reporters=jest-junit
      - store_test_results:
          path: /tmp/test-results/
      - store_artifacts:
          path: /tmp/test-results/

  test_diff:
    working_directory: ~/basset/diff
    docker:
      - image: circleci/python:3.6.7-browsers
        environment:
          PIPENV_VENV_IN_PROJECT: true
          BASSET_URL: http://localhost:3000
          S3_ENDPOINT: 'none'
    steps:
      - checkout:
          path: ~/basset
      - run: mkdir -p /tmp/test-reports
      - run: sudo chown -R circleci:circleci /usr/local/bin
      - run: sudo chown -R circleci:circleci /usr/local/lib/python3.6/site-packages
      - restore_cache:
          key: basset-diff-{{ checksum "Pipfile.lock" }}
      - run:
          command: |
            sudo pip install pipenv
            pipenv install -d
      - save_cache:
          key: basset-diff-{{ checksum "Pipfile.lock" }}
          paths:
            - ".venv"
            - "/usr/local/bin"
            - "/usr/local/lib/python3.6/site-packages"
      - run:
          command: |
            mkdir tests/images/
      - run:
          command: |
            pipenv run python -m pytest --junitxml=/tmp/test-results/junit.xml
      - store_test_results:
          path: /tmp/test-results/
      - store_artifacts:
          path: /tmp/test-results/

  test_selenium:
    working_directory: ~/basset/express
    docker:
      - image: circleci/node:10.14.1
        environment:
          DB_HOST: localhost
          DB_NAME: bassettest
          DB_USERNAME: basset
          NODE_ENV: test
          BASSET_URL: http://localhost:3000
          BASSET_PRIVATE: 0
      - image: circleci/postgres:10
        environment:
          POSTGRES_USER: basset
          POSTGRES_DB: bassettest
    environment:
      JEST_JUNIT_OUTPUT_DIR: /tmp/test-results/
    steps:
      - checkout:
          path: ~/basset
      - run: mkdir -p /tmp/test-results/
      - run: mkdir -p /tmp/jest_basset_global_setup/
      - run:
          name: update-npm
          command: 'sudo npm install -g npm@latest'
      - restore_cache:
          key: basset-be-cache-{{ checksum "package.json" }}
      - run:
          name: install-npm
          command: npm install
      - save_cache:
          key: basset-be-cache-{{ checksum "package.json" }}
          paths:
            - ./node_modules
      - run:
          name: Install firefox and geckodriver
          command: |
            export FIREFOX_VERSION=latest
            FIREFOX_DOWNLOAD_URL=$(if [ $FIREFOX_VERSION = "latest" ] || [ $FIREFOX_VERSION = "nightly-latest" ] || [ $FIREFOX_VERSION = "devedition-latest" ]; then echo "https://download.mozilla.org/?product=firefox-$FIREFOX_VERSION-ssl&os=linux64&lang=en-US"; else echo "https://download-installer.cdn.mozilla.net/pub/firefox/releases/$FIREFOX_VERSION/linux-x86_64/en-US/firefox-$FIREFOX_VERSION.tar.bz2"; fi) \
              && apt-get update -qqy \
              && apt-get -qqy --no-install-recommends install firefox \
              && rm -rf /var/lib/apt/lists/* /var/cache/apt/* \
              && wget --no-verbose -O /tmp/firefox.tar.bz2 $FIREFOX_DOWNLOAD_URL \
              && apt-get -y purge firefox \
              && rm -rf /opt/firefox \
              && tar -C /opt -xjf /tmp/firefox.tar.bz2 \
              && rm /tmp/firefox.tar.bz2 \
              && mv /opt/firefox /opt/firefox-$FIREFOX_VERSION \
              && ln -fs /opt/firefox-$FIREFOX_VERSION/firefox /usr/bin/firefox


            # install geckodriver
            export GECKODRIVER_VERSION=latest
            GK_VERSION=$(if [ ${GECKODRIVER_VERSION:-latest} = "latest" ]; then echo "0.24.0"; else echo $GECKODRIVER_VERSION; fi) \
              && echo "Using GeckoDriver version: "$GK_VERSION \
              && wget --no-verbose -O /tmp/geckodriver.tar.gz https://github.com/mozilla/geckodriver/releases/download/v$GK_VERSION/geckodriver-v$GK_VERSION-linux64.tar.gz \
              && rm -rf /opt/geckodriver \
              && tar -C /opt -zxf /tmp/geckodriver.tar.gz \
              && rm /tmp/geckodriver.tar.gz \
              && mv /opt/geckodriver /opt/geckodriver-$GK_VERSION \
              && chmod 755 /opt/geckodriver-$GK_VERSION \
              && ln -fs /opt/geckodriver-$GK_VERSION /usr/bin/geckodriver
      - run:
          name: Run selenium tests
          command: npm run test:selenium -- -i --reporters=default --reporters=jest-junit
      - store_test_results:
          path: /tmp/test-results/
      - store_artifacts:
          path: /tmp/test-results/

workflows:
  version: 2
  build_and_test:
    jobs:
      - test_backend
      - test_frontend
      - test_diff
      - test_selenium

